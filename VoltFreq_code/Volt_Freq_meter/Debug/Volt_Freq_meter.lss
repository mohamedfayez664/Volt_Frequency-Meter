
Volt_Freq_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  000022ba  0000234e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800190  00800190  0000247e  2**0
                  ALLOC
  3 .stab         00001c2c  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000104d  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000050f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  000052d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000550b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00007d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  000093c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000a7a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000a9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000acb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b709  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__vector_5>
      18:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 0b 	call	0x1678	; 0x1678 <main>
      8a:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e8       	ldi	r22, 0x83	; 131
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__gesf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__gesf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__gesf2+0x58>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e5 57       	subi	r30, 0x75	; 117
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <DELAY_init>:
#define F_CPU_Pre F_CPU_64
#endif


/////////////////////////
void DELAY_init (){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	////timer2 init
	TCNT2=0;              //initial
     f52:	e4 e4       	ldi	r30, 0x44	; 68
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	10 82       	st	Z, r1
	OCR2 =125 ;           //initial compare value 
     f58:	e3 e4       	ldi	r30, 0x43	; 67
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	8d e7       	ldi	r24, 0x7D	; 125
     f5e:	80 83       	st	Z, r24
	//>>for f_cpu 1 and 8 M  ,,,pre_scaler 8 and in mili seconds
	//it will over every 1 mili_second>>(1/1M/pre) >>8 usec per every count
	//>>> com = 1000/8 -> 125 >>    8usec * 125 =1000 usec

	TCCR2 = (1<<FOC2) | (1<<WGM21);  //clock is zero to make timer un_active
     f60:	e5 e4       	ldi	r30, 0x45	; 69
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	88 e8       	ldi	r24, 0x88	; 136
     f66:	80 83       	st	Z, r24
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <DELAY_ms>:

void DELAY_ms   (uint16 number_of_ms){
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <DELAY_ms+0x6>
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01

	if(number_of_ms >0 ){
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	89 f1       	breq	.+98     	; 0xfe8 <DELAY_ms+0x7a>
		TCCR2 =(TCCR2 & 0xf8) | (F_CPU_Pre & 0x07); //to run timer enter clock(2for 1M ,3 to 8M)
     f86:	a5 e4       	ldi	r26, 0x45	; 69
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e5 e4       	ldi	r30, 0x45	; 69
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	88 7f       	andi	r24, 0xF8	; 248
     f92:	82 60       	ori	r24, 0x02	; 2
     f94:	8c 93       	st	X, r24
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <DELAY_ms+0x48>
		                                            // tcnt2 = 0 ;;;;;;

		while (number_of_ms--){

			while(BIT_IS_CLEAR(TIFR,OCF2) );
     f98:	e8 e5       	ldi	r30, 0x58	; 88
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	88 23       	and	r24, r24
     fa0:	dc f7       	brge	.-10     	; 0xf98 <DELAY_ms+0x2a>
			SET_BIT(TIFR,OCF2) ;      //to make it = 0 again
     fa2:	a8 e5       	ldi	r26, 0x58	; 88
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 e5       	ldi	r30, 0x58	; 88
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 68       	ori	r24, 0x80	; 128
     fae:	8c 93       	st	X, r24
			TCNT2 = 0;         //to clear timer
     fb0:	e4 e4       	ldi	r30, 0x44	; 68
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	10 82       	st	Z, r1

	if(number_of_ms >0 ){
		TCCR2 =(TCCR2 & 0xf8) | (F_CPU_Pre & 0x07); //to run timer enter clock(2for 1M ,3 to 8M)
		                                            // tcnt2 = 0 ;;;;;;

		while (number_of_ms--){
     fb6:	1b 82       	std	Y+3, r1	; 0x03
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	11 f0       	breq	.+4      	; 0xfc4 <DELAY_ms+0x56>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	88 23       	and	r24, r24
     fd2:	11 f7       	brne	.-60     	; 0xf98 <DELAY_ms+0x2a>
			while(BIT_IS_CLEAR(TIFR,OCF2) );
			SET_BIT(TIFR,OCF2) ;      //to make it = 0 again
			TCNT2 = 0;         //to clear timer
		}

		TCCR2&=~0x07;      //to turn timer off >> clear clock
     fd4:	a5 e4       	ldi	r26, 0x45	; 69
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e5 e4       	ldi	r30, 0x45	; 69
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	88 7f       	andi	r24, 0xF8	; 248
     fe0:	8c 93       	st	X, r24
		TCNT2 = 0;         //to clear timer
     fe2:	e4 e4       	ldi	r30, 0x44	; 68
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	10 82       	st	Z, r1
	}
} 
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <DELAY_sec>:


void DELAY_sec  (uint16 number_of_sec){
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <DELAY_sec+0x6>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01

	if(number_of_sec > 0 ){
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	a1 f0       	breq	.+40     	; 0x1034 <DELAY_sec+0x40>
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <DELAY_sec+0x22>
		while (number_of_sec--)
			DELAY_ms   (1000);
    100e:	88 ee       	ldi	r24, 0xE8	; 232
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DELAY_ms>


void DELAY_sec  (uint16 number_of_sec){

	if(number_of_sec > 0 ){
		while (number_of_sec--)
    1016:	1b 82       	std	Y+3, r1	; 0x03
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	11 f0       	breq	.+4      	; 0x1024 <DELAY_sec+0x30>
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	8b 83       	std	Y+3, r24	; 0x03
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	9a 83       	std	Y+2, r25	; 0x02
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 23       	and	r24, r24
    1032:	69 f7       	brne	.-38     	; 0x100e <DELAY_sec+0x1a>
			DELAY_ms   (1000);
	}
}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1048:	a1 e3       	ldi	r26, 0x31	; 49
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e1 e3       	ldi	r30, 0x31	; 49
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	80 6b       	ori	r24, 0xB0	; 176
    1054:	8c 93       	st	X, r24
	LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE);        /* initialize LCD in 4-bit mode */
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
#elif (LCD_DATA_BITS == 8)
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
    1056:	e4 e3       	ldi	r30, 0x34	; 52
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	80 83       	st	Z, r24
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    105e:	88 e3       	ldi	r24, 0x38	; 56
    1060:	0e 94 3b 08 	call	0x1076	; 0x1076 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);   /* cursor off */
    1064:	8c e0       	ldi	r24, 0x0C	; 12
    1066:	0e 94 3b 08 	call	0x1076	; 0x1076 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN); /* clear LCD at the beginning */
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	0e 94 3b 08 	call	0x1076	; 0x1076 <LCD_sendCommand>
}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RS); /* Instruction Mode RS=0 */
    1082:	a2 e3       	ldi	r26, 0x32	; 50
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e2 e3       	ldi	r30, 0x32	; 50
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8f 7e       	andi	r24, 0xEF	; 239
    108e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW); /* write data to LCD so RW=0 */
    1090:	a2 e3       	ldi	r26, 0x32	; 50
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e2 e3       	ldi	r30, 0x32	; 50
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8f 7d       	andi	r24, 0xDF	; 223
    109c:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Tas = 50ns */
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DELAY_ms>
	SET_BIT(LCD_CTRL_PORT_OUT,E); /* Enable LCD E=1 */
    10a6:	a2 e3       	ldi	r26, 0x32	; 50
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e2 e3       	ldi	r30, 0x32	; 50
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 68       	ori	r24, 0x80	; 128
    10b2:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Tpw - Tdsw = 190ns */
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DELAY_ms>

	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
	DELAY_ms(1); /* delay for processing Th = 13ns */
#elif (LCD_DATA_BITS == 8)
	LCD_DATA_PORT_OUT = command ;  /* out the required command to the data bus D0 --> D7 */
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	80 83       	st	Z, r24
	DELAY_ms(1);                 /* delay for processing Tdsw = 100ns */
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DELAY_ms>
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
    10cc:	a2 e3       	ldi	r26, 0x32	; 50
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e2 e3       	ldi	r30, 0x32	; 50
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8f 77       	andi	r24, 0x7F	; 127
    10d8:	8c 93       	st	X, r24
	DELAY_ms(1);                 /* delay for processing Th = 13ns */
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DELAY_ms>
#endif
}
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <LCD_displayCharacter>:


void LCD_displayCharacter(uint8 data)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	0f 92       	push	r0
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LCD_CTRL_PORT_OUT,RS); /* Data Mode RS=1 */
    10f6:	a2 e3       	ldi	r26, 0x32	; 50
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e2 e3       	ldi	r30, 0x32	; 50
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	80 61       	ori	r24, 0x10	; 16
    1102:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW); /* write data to LCD so RW=0 */
    1104:	a2 e3       	ldi	r26, 0x32	; 50
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e2 e3       	ldi	r30, 0x32	; 50
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8f 7d       	andi	r24, 0xDF	; 223
    1110:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Tas = 50ns */
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DELAY_ms>
	SET_BIT(LCD_CTRL_PORT_OUT,E); /* Enable LCD E=1 */
    111a:	a2 e3       	ldi	r26, 0x32	; 50
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e2 e3       	ldi	r30, 0x32	; 50
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 68       	ori	r24, 0x80	; 128
    1126:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DELAY_ms>

	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
	DELAY_ms(1); /* delay for processing Th = 13ns */
#elif (LCD_DATA_BITS == 8)
	LCD_DATA_PORT_OUT = data; /* out the required data to the data bus D0 --> D7 */
    1130:	e5 e3       	ldi	r30, 0x35	; 53
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	80 83       	st	Z, r24
	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DELAY_ms>
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
    1140:	a2 e3       	ldi	r26, 0x32	; 50
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e2 e3       	ldi	r30, 0x32	; 50
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8f 77       	andi	r24, 0x7F	; 127
    114c:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Th = 13ns */
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DELAY_ms>
#endif
}
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <LCD_displayString+0x6>
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	0a c0       	rjmp	.+20     	; 0x1182 <LCD_displayString+0x24>
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    116e:	e9 81       	ldd	r30, Y+1	; 0x01
    1170:	fa 81       	ldd	r31, Y+2	; 0x02
    1172:	80 81       	ld	r24, Z
    1174:	0e 94 75 08 	call	0x10ea	; 0x10ea <LCD_displayCharacter>
		Str++;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
#endif
}

void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    1182:	e9 81       	ldd	r30, Y+1	; 0x01
    1184:	fa 81       	ldd	r31, Y+2	; 0x02
    1186:	80 81       	ld	r24, Z
    1188:	88 23       	and	r24, r24
    118a:	89 f7       	brne	.-30     	; 0x116e <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <LCD_goToRowColumn+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <LCD_goToRowColumn+0x8>
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	8a 83       	std	Y+2, r24	; 0x02
    11a6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3d 83       	std	Y+5, r19	; 0x05
    11b0:	2c 83       	std	Y+4, r18	; 0x04
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	9d 81       	ldd	r25, Y+5	; 0x05
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	c1 f0       	breq	.+48     	; 0x11ec <LCD_goToRowColumn+0x56>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <LCD_goToRowColumn+0x3a>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <LCD_goToRowColumn+0x50>
    11ce:	19 c0       	rjmp	.+50     	; 0x1202 <LCD_goToRowColumn+0x6c>
    11d0:	2c 81       	ldd	r18, Y+4	; 0x04
    11d2:	3d 81       	ldd	r19, Y+5	; 0x05
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	69 f0       	breq	.+26     	; 0x11f4 <LCD_goToRowColumn+0x5e>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	61 f0       	breq	.+24     	; 0x11fc <LCD_goToRowColumn+0x66>
    11e4:	0e c0       	rjmp	.+28     	; 0x1202 <LCD_goToRowColumn+0x6c>
	{
	case 0:
		Address=col;
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	0b c0       	rjmp	.+22     	; 0x1202 <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		Address=col+0x40;
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	80 5c       	subi	r24, 0xC0	; 192
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	07 c0       	rjmp	.+14     	; 0x1202 <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		Address=col+0x10;
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	80 5f       	subi	r24, 0xF0	; 240
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		Address=col+0x50;
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	80 5b       	subi	r24, 0xB0	; 176
    1200:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	80 68       	ori	r24, 0x80	; 128
    1206:	0e 94 3b 08 	call	0x1076	; 0x1076 <LCD_sendCommand>
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <LCD_displayStringRowColumn+0x6>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <LCD_displayStringRowColumn+0x8>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	6a 83       	std	Y+2, r22	; 0x02
    122a:	5c 83       	std	Y+4, r21	; 0x04
    122c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	6a 81       	ldd	r22, Y+2	; 0x02
    1232:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	0e 94 af 08 	call	0x115e	; 0x115e <LCD_displayString>
	//		}
	//	col++;
	//	if (col==15)
	//		row=1;
	//
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <LCD_displayNumber>:

void LCD_displayNumber(sint32 number) /* max number is size of uint: 4294967295 */
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	27 97       	sbiw	r28, 0x07	; 7
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	6c 83       	std	Y+4, r22	; 0x04
    1262:	7d 83       	std	Y+5, r23	; 0x05
    1264:	8e 83       	std	Y+6, r24	; 0x06
    1266:	9f 83       	std	Y+7, r25	; 0x07
	static char str[11];       //max number entered to display on lcd
	char *buff = &str[10];     /* String to hold the ascii result */
    1268:	8b e9       	ldi	r24, 0x9B	; 155
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	9b 83       	std	Y+3, r25	; 0x03
    126e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 negtive_flag = 0 ;
    1270:	19 82       	std	Y+1, r1	; 0x01
	if (number<0){
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	ae 81       	ldd	r26, Y+6	; 0x06
    1278:	bf 81       	ldd	r27, Y+7	; 0x07
    127a:	bb 23       	and	r27, r27
    127c:	8c f4       	brge	.+34     	; 0x12a0 <LCD_displayNumber+0x54>
		negtive_flag=1  ;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	89 83       	std	Y+1, r24	; 0x01
		number = -number ;
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	ae 81       	ldd	r26, Y+6	; 0x06
    1288:	bf 81       	ldd	r27, Y+7	; 0x07
    128a:	b0 95       	com	r27
    128c:	a0 95       	com	r26
    128e:	90 95       	com	r25
    1290:	81 95       	neg	r24
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	af 4f       	sbci	r26, 0xFF	; 255
    1296:	bf 4f       	sbci	r27, 0xFF	; 255
    1298:	8c 83       	std	Y+4, r24	; 0x04
    129a:	9d 83       	std	Y+5, r25	; 0x05
    129c:	ae 83       	std	Y+6, r26	; 0x06
    129e:	bf 83       	std	Y+7, r27	; 0x07
	}
	*buff = '\0';
    12a0:	ea 81       	ldd	r30, Y+2	; 0x02
    12a2:	fb 81       	ldd	r31, Y+3	; 0x03
    12a4:	10 82       	st	Z, r1
	if (number == 0){
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	ae 81       	ldd	r26, Y+6	; 0x06
    12ac:	bf 81       	ldd	r27, Y+7	; 0x07
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	a1 05       	cpc	r26, r1
    12b2:	b1 05       	cpc	r27, r1
    12b4:	b1 f5       	brne	.+108    	; 0x1322 <LCD_displayNumber+0xd6>
		*--buff = '0';
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9b 83       	std	Y+3, r25	; 0x03
    12be:	8a 83       	std	Y+2, r24	; 0x02
    12c0:	ea 81       	ldd	r30, Y+2	; 0x02
    12c2:	fb 81       	ldd	r31, Y+3	; 0x03
    12c4:	80 e3       	ldi	r24, 0x30	; 48
    12c6:	80 83       	st	Z, r24
    12c8:	35 c0       	rjmp	.+106    	; 0x1334 <LCD_displayNumber+0xe8>
	}
	else {
		while(number>0)
		{
			*--buff = "0123456789"[number %10]; /* 10 for decimal */
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	9b 83       	std	Y+3, r25	; 0x03
    12d2:	8a 83       	std	Y+2, r24	; 0x02
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	ae 81       	ldd	r26, Y+6	; 0x06
    12da:	bf 81       	ldd	r27, Y+7	; 0x07
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodsi4>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	fc 01       	movw	r30, r24
    12f2:	e0 5a       	subi	r30, 0xA0	; 160
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	80 81       	ld	r24, Z
    12f8:	ea 81       	ldd	r30, Y+2	; 0x02
    12fa:	fb 81       	ldd	r31, Y+3	; 0x03
    12fc:	80 83       	st	Z, r24
			number /=10;
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	ae 81       	ldd	r26, Y+6	; 0x06
    1304:	bf 81       	ldd	r27, Y+7	; 0x07
    1306:	2a e0       	ldi	r18, 0x0A	; 10
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	bc 01       	movw	r22, r24
    1310:	cd 01       	movw	r24, r26
    1312:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodsi4>
    1316:	da 01       	movw	r26, r20
    1318:	c9 01       	movw	r24, r18
    131a:	8c 83       	std	Y+4, r24	; 0x04
    131c:	9d 83       	std	Y+5, r25	; 0x05
    131e:	ae 83       	std	Y+6, r26	; 0x06
    1320:	bf 83       	std	Y+7, r27	; 0x07
	*buff = '\0';
	if (number == 0){
		*--buff = '0';
	}
	else {
		while(number>0)
    1322:	8c 81       	ldd	r24, Y+4	; 0x04
    1324:	9d 81       	ldd	r25, Y+5	; 0x05
    1326:	ae 81       	ldd	r26, Y+6	; 0x06
    1328:	bf 81       	ldd	r27, Y+7	; 0x07
    132a:	18 16       	cp	r1, r24
    132c:	19 06       	cpc	r1, r25
    132e:	1a 06       	cpc	r1, r26
    1330:	1b 06       	cpc	r1, r27
    1332:	5c f2       	brlt	.-106    	; 0x12ca <LCD_displayNumber+0x7e>
		{
			*--buff = "0123456789"[number %10]; /* 10 for decimal */
			number /=10;
		}
	}
	if(negtive_flag){
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	88 23       	and	r24, r24
    1338:	51 f0       	breq	.+20     	; 0x134e <LCD_displayNumber+0x102>
		negtive_flag=0;
    133a:	19 82       	std	Y+1, r1	; 0x01
		*--buff = '-' ;
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	9b 81       	ldd	r25, Y+3	; 0x03
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9b 83       	std	Y+3, r25	; 0x03
    1344:	8a 83       	std	Y+2, r24	; 0x02
    1346:	ea 81       	ldd	r30, Y+2	; 0x02
    1348:	fb 81       	ldd	r31, Y+3	; 0x03
    134a:	8d e2       	ldi	r24, 0x2D	; 45
    134c:	80 83       	st	Z, r24
	}
	LCD_displayString(buff);
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	0e 94 af 08 	call	0x115e	; 0x115e <LCD_displayString>
	/*another solution*/
	char buff[11];
	itoa(number,buff,10);
	LCD_displayString(buff);
#endif
}
    1356:	27 96       	adiw	r28, 0x07	; 7
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <LCD_displayFloatNumber>:
void LCD_displayFloatNumber(float32 data,uint8 num_pre)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	61 97       	sbiw	r28, 0x11	; 17
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	6d 87       	std	Y+13, r22	; 0x0d
    137e:	7e 87       	std	Y+14, r23	; 0x0e
    1380:	8f 87       	std	Y+15, r24	; 0x0f
    1382:	98 8b       	std	Y+16, r25	; 0x10
    1384:	49 8b       	std	Y+17, r20	; 0x11
	static uint8 str[11];   //max number entered to display on lcd
	uint8 *buff = &str[10], p_counter=num_pre ,negtive_flag=0;
    1386:	86 ea       	ldi	r24, 0xA6	; 166
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	9c 87       	std	Y+12, r25	; 0x0c
    138c:	8b 87       	std	Y+11, r24	; 0x0b
    138e:	89 89       	ldd	r24, Y+17	; 0x11
    1390:	8a 87       	std	Y+10, r24	; 0x0a
    1392:	19 86       	std	Y+9, r1	; 0x09
	float32 pre; uint32 p=1;            /* String to hold the ascii result */
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	ab 83       	std	Y+3, r26	; 0x03
    13a2:	bc 83       	std	Y+4, r27	; 0x04
    *buff = '\0';
    13a4:	eb 85       	ldd	r30, Y+11	; 0x0b
    13a6:	fc 85       	ldd	r31, Y+12	; 0x0c
    13a8:	10 82       	st	Z, r1

    if (data<0){
    13aa:	6d 85       	ldd	r22, Y+13	; 0x0d
    13ac:	7e 85       	ldd	r23, Y+14	; 0x0e
    13ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b0:	98 89       	ldd	r25, Y+16	; 0x10
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    13be:	88 23       	and	r24, r24
    13c0:	0c f5       	brge	.+66     	; 0x1404 <LCD_displayFloatNumber+0x9c>
		negtive_flag=1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 87       	std	Y+9, r24	; 0x09
		data=-data  ;
    13c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ca:	af 85       	ldd	r26, Y+15	; 0x0f
    13cc:	b8 89       	ldd	r27, Y+16	; 0x10
    13ce:	b0 58       	subi	r27, 0x80	; 128
    13d0:	8d 87       	std	Y+13, r24	; 0x0d
    13d2:	9e 87       	std	Y+14, r25	; 0x0e
    13d4:	af 87       	std	Y+15, r26	; 0x0f
    13d6:	b8 8b       	std	Y+16, r27	; 0x10
    13d8:	15 c0       	rjmp	.+42     	; 0x1404 <LCD_displayFloatNumber+0x9c>
	}

    for(; p_counter>0; p_counter--){
		p*=10;
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	9a 81       	ldd	r25, Y+2	; 0x02
    13de:	ab 81       	ldd	r26, Y+3	; 0x03
    13e0:	bc 81       	ldd	r27, Y+4	; 0x04
    13e2:	2a e0       	ldi	r18, 0x0A	; 10
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 a1 10 	call	0x2142	; 0x2142 <__mulsi3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	ab 83       	std	Y+3, r26	; 0x03
    13fc:	bc 83       	std	Y+4, r27	; 0x04
    if (data<0){
		negtive_flag=1;
		data=-data  ;
	}

    for(; p_counter>0; p_counter--){
    13fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1400:	81 50       	subi	r24, 0x01	; 1
    1402:	8a 87       	std	Y+10, r24	; 0x0a
    1404:	8a 85       	ldd	r24, Y+10	; 0x0a
    1406:	88 23       	and	r24, r24
    1408:	41 f7       	brne	.-48     	; 0x13da <LCD_displayFloatNumber+0x72>
		p*=10;
    }
	pre=data-(int)data;
    140a:	6d 85       	ldd	r22, Y+13	; 0x0d
    140c:	7e 85       	ldd	r23, Y+14	; 0x0e
    140e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1410:	98 89       	ldd	r25, Y+16	; 0x10
    1412:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	aa 27       	eor	r26, r26
    141c:	97 fd       	sbrc	r25, 7
    141e:	a0 95       	com	r26
    1420:	ba 2f       	mov	r27, r26
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    142a:	9b 01       	movw	r18, r22
    142c:	ac 01       	movw	r20, r24
    142e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1430:	7e 85       	ldd	r23, Y+14	; 0x0e
    1432:	8f 85       	ldd	r24, Y+15	; 0x0f
    1434:	98 89       	ldd	r25, Y+16	; 0x10
    1436:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	8d 83       	std	Y+5, r24	; 0x05
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	af 83       	std	Y+7, r26	; 0x07
    1444:	b8 87       	std	Y+8, r27	; 0x08
	pre*=p;
    1446:	69 81       	ldd	r22, Y+1	; 0x01
    1448:	7a 81       	ldd	r23, Y+2	; 0x02
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	6d 81       	ldd	r22, Y+5	; 0x05
    1458:	7e 81       	ldd	r23, Y+6	; 0x06
    145a:	8f 81       	ldd	r24, Y+7	; 0x07
    145c:	98 85       	ldd	r25, Y+8	; 0x08
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	af 83       	std	Y+7, r26	; 0x07
    146c:	b8 87       	std	Y+8, r27	; 0x08

	if (data == 0){
    146e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1470:	7e 85       	ldd	r23, Y+14	; 0x0e
    1472:	8f 85       	ldd	r24, Y+15	; 0x0f
    1474:	98 89       	ldd	r25, Y+16	; 0x10
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1482:	88 23       	and	r24, r24
    1484:	69 f0       	breq	.+26     	; 0x14a0 <LCD_displayFloatNumber+0x138>
    1486:	5a c0       	rjmp	.+180    	; 0x153c <LCD_displayFloatNumber+0x1d4>
		while(num_pre>0){
			*--buff = '0';
    1488:	8b 85       	ldd	r24, Y+11	; 0x0b
    148a:	9c 85       	ldd	r25, Y+12	; 0x0c
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	9c 87       	std	Y+12, r25	; 0x0c
    1490:	8b 87       	std	Y+11, r24	; 0x0b
    1492:	eb 85       	ldd	r30, Y+11	; 0x0b
    1494:	fc 85       	ldd	r31, Y+12	; 0x0c
    1496:	80 e3       	ldi	r24, 0x30	; 48
    1498:	80 83       	st	Z, r24
			num_pre--;
    149a:	89 89       	ldd	r24, Y+17	; 0x11
    149c:	81 50       	subi	r24, 0x01	; 1
    149e:	89 8b       	std	Y+17, r24	; 0x11
    }
	pre=data-(int)data;
	pre*=p;

	if (data == 0){
		while(num_pre>0){
    14a0:	89 89       	ldd	r24, Y+17	; 0x11
    14a2:	88 23       	and	r24, r24
    14a4:	89 f7       	brne	.-30     	; 0x1488 <LCD_displayFloatNumber+0x120>
			*--buff = '0';
			num_pre--;
		}
		*--buff = ',';
    14a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	9c 87       	std	Y+12, r25	; 0x0c
    14ae:	8b 87       	std	Y+11, r24	; 0x0b
    14b0:	eb 85       	ldd	r30, Y+11	; 0x0b
    14b2:	fc 85       	ldd	r31, Y+12	; 0x0c
    14b4:	8c e2       	ldi	r24, 0x2C	; 44
    14b6:	80 83       	st	Z, r24
		*--buff = '0';
    14b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	9c 87       	std	Y+12, r25	; 0x0c
    14c0:	8b 87       	std	Y+11, r24	; 0x0b
    14c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    14c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    14c6:	80 e3       	ldi	r24, 0x30	; 48
    14c8:	80 83       	st	Z, r24
    14ca:	b2 c0       	rjmp	.+356    	; 0x1630 <LCD_displayFloatNumber+0x2c8>
	}
	else {
		while((int)pre>0)
		{
			*--buff = "0123456789"[(int)pre %10]; /* 10 for decimal */
    14cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9c 87       	std	Y+12, r25	; 0x0c
    14d4:	8b 87       	std	Y+11, r24	; 0x0b
    14d6:	6d 81       	ldd	r22, Y+5	; 0x05
    14d8:	7e 81       	ldd	r23, Y+6	; 0x06
    14da:	8f 81       	ldd	r24, Y+7	; 0x07
    14dc:	98 85       	ldd	r25, Y+8	; 0x08
    14de:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	2a e0       	ldi	r18, 0x0A	; 10
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	b9 01       	movw	r22, r18
    14ec:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__divmodhi4>
    14f0:	fc 01       	movw	r30, r24
    14f2:	e0 5a       	subi	r30, 0xA0	; 160
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	80 81       	ld	r24, Z
    14f8:	eb 85       	ldd	r30, Y+11	; 0x0b
    14fa:	fc 85       	ldd	r31, Y+12	; 0x0c
    14fc:	80 83       	st	Z, r24
			pre =(int)pre/10;
    14fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1500:	7e 81       	ldd	r23, Y+6	; 0x06
    1502:	8f 81       	ldd	r24, Y+7	; 0x07
    1504:	98 85       	ldd	r25, Y+8	; 0x08
    1506:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	2a e0       	ldi	r18, 0x0A	; 10
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	b9 01       	movw	r22, r18
    1514:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__divmodhi4>
    1518:	cb 01       	movw	r24, r22
    151a:	aa 27       	eor	r26, r26
    151c:	97 fd       	sbrc	r25, 7
    151e:	a0 95       	com	r26
    1520:	ba 2f       	mov	r27, r26
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	8d 83       	std	Y+5, r24	; 0x05
    1530:	9e 83       	std	Y+6, r25	; 0x06
    1532:	af 83       	std	Y+7, r26	; 0x07
    1534:	b8 87       	std	Y+8, r27	; 0x08
			num_pre--;
    1536:	89 89       	ldd	r24, Y+17	; 0x11
    1538:	81 50       	subi	r24, 0x01	; 1
    153a:	89 8b       	std	Y+17, r24	; 0x11
		}
		*--buff = ',';
		*--buff = '0';
	}
	else {
		while((int)pre>0)
    153c:	6d 81       	ldd	r22, Y+5	; 0x05
    153e:	7e 81       	ldd	r23, Y+6	; 0x06
    1540:	8f 81       	ldd	r24, Y+7	; 0x07
    1542:	98 85       	ldd	r25, Y+8	; 0x08
    1544:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	18 16       	cp	r1, r24
    154e:	19 06       	cpc	r1, r25
    1550:	0c f4       	brge	.+2      	; 0x1554 <LCD_displayFloatNumber+0x1ec>
    1552:	bc cf       	rjmp	.-136    	; 0x14cc <LCD_displayFloatNumber+0x164>
		{
			*--buff = "0123456789"[(int)pre %10]; /* 10 for decimal */
			pre =(int)pre/10;
			num_pre--;
		}
		if(num_pre>0){
    1554:	89 89       	ldd	r24, Y+17	; 0x11
    1556:	88 23       	and	r24, r24
    1558:	61 f0       	breq	.+24     	; 0x1572 <LCD_displayFloatNumber+0x20a>
			*--buff = '0';
    155a:	8b 85       	ldd	r24, Y+11	; 0x0b
    155c:	9c 85       	ldd	r25, Y+12	; 0x0c
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9c 87       	std	Y+12, r25	; 0x0c
    1562:	8b 87       	std	Y+11, r24	; 0x0b
    1564:	eb 85       	ldd	r30, Y+11	; 0x0b
    1566:	fc 85       	ldd	r31, Y+12	; 0x0c
    1568:	80 e3       	ldi	r24, 0x30	; 48
    156a:	80 83       	st	Z, r24
			num_pre--;
    156c:	89 89       	ldd	r24, Y+17	; 0x11
    156e:	81 50       	subi	r24, 0x01	; 1
    1570:	89 8b       	std	Y+17, r24	; 0x11
		}
		*--buff = ',';
    1572:	8b 85       	ldd	r24, Y+11	; 0x0b
    1574:	9c 85       	ldd	r25, Y+12	; 0x0c
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9c 87       	std	Y+12, r25	; 0x0c
    157a:	8b 87       	std	Y+11, r24	; 0x0b
    157c:	eb 85       	ldd	r30, Y+11	; 0x0b
    157e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1580:	8c e2       	ldi	r24, 0x2C	; 44
    1582:	80 83       	st	Z, r24
		if((int)data==0)
    1584:	6d 85       	ldd	r22, Y+13	; 0x0d
    1586:	7e 85       	ldd	r23, Y+14	; 0x0e
    1588:	8f 85       	ldd	r24, Y+15	; 0x0f
    158a:	98 89       	ldd	r25, Y+16	; 0x10
    158c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	09 f0       	breq	.+2      	; 0x159a <LCD_displayFloatNumber+0x232>
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <LCD_displayFloatNumber+0x2b0>
			*--buff = '0';
    159a:	8b 85       	ldd	r24, Y+11	; 0x0b
    159c:	9c 85       	ldd	r25, Y+12	; 0x0c
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	9c 87       	std	Y+12, r25	; 0x0c
    15a2:	8b 87       	std	Y+11, r24	; 0x0b
    15a4:	eb 85       	ldd	r30, Y+11	; 0x0b
    15a6:	fc 85       	ldd	r31, Y+12	; 0x0c
    15a8:	80 e3       	ldi	r24, 0x30	; 48
    15aa:	80 83       	st	Z, r24
    15ac:	35 c0       	rjmp	.+106    	; 0x1618 <LCD_displayFloatNumber+0x2b0>
		while((int)data>0)
		{
			*--buff = "0123456789"[(int)data %10]; /* 10 for decimal */
    15ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9c 87       	std	Y+12, r25	; 0x0c
    15b6:	8b 87       	std	Y+11, r24	; 0x0b
    15b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    15ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    15bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15be:	98 89       	ldd	r25, Y+16	; 0x10
    15c0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	2a e0       	ldi	r18, 0x0A	; 10
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	b9 01       	movw	r22, r18
    15ce:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__divmodhi4>
    15d2:	fc 01       	movw	r30, r24
    15d4:	e0 5a       	subi	r30, 0xA0	; 160
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	80 81       	ld	r24, Z
    15da:	eb 85       	ldd	r30, Y+11	; 0x0b
    15dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    15de:	80 83       	st	Z, r24
			data =(int)data/10;
    15e0:	6d 85       	ldd	r22, Y+13	; 0x0d
    15e2:	7e 85       	ldd	r23, Y+14	; 0x0e
    15e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e6:	98 89       	ldd	r25, Y+16	; 0x10
    15e8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	2a e0       	ldi	r18, 0x0A	; 10
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	b9 01       	movw	r22, r18
    15f6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__divmodhi4>
    15fa:	cb 01       	movw	r24, r22
    15fc:	aa 27       	eor	r26, r26
    15fe:	97 fd       	sbrc	r25, 7
    1600:	a0 95       	com	r26
    1602:	ba 2f       	mov	r27, r26
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	8d 87       	std	Y+13, r24	; 0x0d
    1612:	9e 87       	std	Y+14, r25	; 0x0e
    1614:	af 87       	std	Y+15, r26	; 0x0f
    1616:	b8 8b       	std	Y+16, r27	; 0x10
			num_pre--;
		}
		*--buff = ',';
		if((int)data==0)
			*--buff = '0';
		while((int)data>0)
    1618:	6d 85       	ldd	r22, Y+13	; 0x0d
    161a:	7e 85       	ldd	r23, Y+14	; 0x0e
    161c:	8f 85       	ldd	r24, Y+15	; 0x0f
    161e:	98 89       	ldd	r25, Y+16	; 0x10
    1620:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	18 16       	cp	r1, r24
    162a:	19 06       	cpc	r1, r25
    162c:	0c f4       	brge	.+2      	; 0x1630 <LCD_displayFloatNumber+0x2c8>
    162e:	bf cf       	rjmp	.-130    	; 0x15ae <LCD_displayFloatNumber+0x246>
			*--buff = "0123456789"[(int)data %10]; /* 10 for decimal */
			data =(int)data/10;
		}
	}

	if(negtive_flag){
    1630:	89 85       	ldd	r24, Y+9	; 0x09
    1632:	88 23       	and	r24, r24
    1634:	51 f0       	breq	.+20     	; 0x164a <LCD_displayFloatNumber+0x2e2>
		negtive_flag=0;
    1636:	19 86       	std	Y+9, r1	; 0x09
		*--buff = '-';
    1638:	8b 85       	ldd	r24, Y+11	; 0x0b
    163a:	9c 85       	ldd	r25, Y+12	; 0x0c
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	9c 87       	std	Y+12, r25	; 0x0c
    1640:	8b 87       	std	Y+11, r24	; 0x0b
    1642:	eb 85       	ldd	r30, Y+11	; 0x0b
    1644:	fc 85       	ldd	r31, Y+12	; 0x0c
    1646:	8d e2       	ldi	r24, 0x2D	; 45
    1648:	80 83       	st	Z, r24
	}
	LCD_displayString(buff);
    164a:	8b 85       	ldd	r24, Y+11	; 0x0b
    164c:	9c 85       	ldd	r25, Y+12	; 0x0c
    164e:	0e 94 af 08 	call	0x115e	; 0x115e <LCD_displayString>
}
    1652:	61 96       	adiw	r28, 0x11	; 17
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <LCD_clearScreen>:


void LCD_clearScreen(void)            /*not important */
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	0e 94 3b 08 	call	0x1076	; 0x1076 <LCD_sendCommand>
}
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <main>:
#include "lcd.h"
#include "pulse_measure.h"
#include "delay.h"

int main()
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	/* Initialize both the LCD and ICU driver */
	DELAY_init();
    1680:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DELAY_init>
	LCD_init();
    1684:	0e 94 20 08 	call	0x1040	; 0x1040 <LCD_init>
	pulse_init();
    1688:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <pulse_init>

	while(1)
	{
		if( get_pulse_read() )
    168c:	0e 94 93 0b 	call	0x1726	; 0x1726 <get_pulse_read>
    1690:	88 23       	and	r24, r24
    1692:	e1 f3       	breq	.-8      	; 0x168c <main+0x14>
		{
			LCD_clearScreen();
    1694:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_clearScreen>
			LCD_displayString("volt = "); //tack care from V_reference in driver
    1698:	8b e6       	ldi	r24, 0x6B	; 107
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 af 08 	call	0x115e	; 0x115e <LCD_displayString>
			LCD_displayNumber(mili_volt);
    16a0:	80 91 b4 01 	lds	r24, 0x01B4
    16a4:	90 91 b5 01 	lds	r25, 0x01B5
    16a8:	a0 91 b6 01 	lds	r26, 0x01B6
    16ac:	b0 91 b7 01 	lds	r27, 0x01B7
    16b0:	bc 01       	movw	r22, r24
    16b2:	cd 01       	movw	r24, r26
    16b4:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_displayNumber>
			LCD_displayString(" mV");
    16b8:	83 e7       	ldi	r24, 0x73	; 115
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 af 08 	call	0x115e	; 0x115e <LCD_displayString>

			LCD_goToRowColumn(1,0);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCD_goToRowColumn>
			LCD_displayString("freq = ");
    16c8:	87 e7       	ldi	r24, 0x77	; 119
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 af 08 	call	0x115e	; 0x115e <LCD_displayString>
			LCD_displayNumber(frequency);
    16d0:	80 91 ac 01 	lds	r24, 0x01AC
    16d4:	90 91 ad 01 	lds	r25, 0x01AD
    16d8:	a0 91 ae 01 	lds	r26, 0x01AE
    16dc:	b0 91 af 01 	lds	r27, 0x01AF
    16e0:	bc 01       	movw	r22, r24
    16e2:	cd 01       	movw	r24, r26
    16e4:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_displayNumber>
			LCD_displayString(" HZ");
    16e8:	8f e7       	ldi	r24, 0x7F	; 127
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 af 08 	call	0x115e	; 0x115e <LCD_displayString>

			DELAY_ms(350);
    16f0:	8e e5       	ldi	r24, 0x5E	; 94
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DELAY_ms>
    16f8:	c9 cf       	rjmp	.-110    	; 0x168c <main+0x14>

000016fa <pulse_init>:
volatile uint32 dutyCycle = 0,frequency = 0,	period = 0, mili_volt = 0;
uint16 g_timeHigh  = 0, g_timePeriod = 0, g_timePeriodPlusHigh = 0;

TIMER_ConfigType  Icu_Config = {TIMER1_ICU,F_CPU_CLOCK,RISING};

void pulse_init(void){   //measure
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    1702:	af e5       	ldi	r26, 0x5F	; 95
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	ef e5       	ldi	r30, 0x5F	; 95
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	80 68       	ori	r24, 0x80	; 128
    170e:	8c 93       	st	X, r24

	TIMER1_CallBack (APP_edgeProcessing);
    1710:	83 e5       	ldi	r24, 0x53	; 83
    1712:	9c e0       	ldi	r25, 0x0C	; 12
    1714:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <TIMER1_CallBack>
	/* Create configuration structure for ICU driver */
	/* Set the Call back function pointer in the ICU driver */
	TIMER1_init(&Icu_Config);
    1718:	8b e8       	ldi	r24, 0x8B	; 139
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <TIMER1_init>
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <get_pulse_read>:

uint8 get_pulse_read(){
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
    172c:	1f 93       	push	r17
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	0f 92       	push	r0
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62

	if(g_edgeCount == 4)
    1738:	80 91 a7 01 	lds	r24, 0x01A7
    173c:	84 30       	cpi	r24, 0x04	; 4
    173e:	09 f0       	breq	.+2      	; 0x1742 <get_pulse_read+0x1c>
    1740:	a8 c0       	rjmp	.+336    	; 0x1892 <get_pulse_read+0x16c>
	{
		TIMER_Deinit(TIMER1); /* Disable ICU Driver */
    1742:	85 e0       	ldi	r24, 0x05	; 5
    1744:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <TIMER_Deinit>
		g_edgeCount = 0;
    1748:	10 92 a7 01 	sts	0x01A7, r1

		/* calculate the freq */
		frequency = 1000000 / (g_timePeriodPlusHigh - g_timeHigh);
    174c:	20 91 bc 01 	lds	r18, 0x01BC
    1750:	30 91 bd 01 	lds	r19, 0x01BD
    1754:	80 91 b8 01 	lds	r24, 0x01B8
    1758:	90 91 b9 01 	lds	r25, 0x01B9
    175c:	a9 01       	movw	r20, r18
    175e:	48 1b       	sub	r20, r24
    1760:	59 0b       	sbc	r21, r25
    1762:	ca 01       	movw	r24, r20
    1764:	9c 01       	movw	r18, r24
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	80 e4       	ldi	r24, 0x40	; 64
    176c:	92 e4       	ldi	r25, 0x42	; 66
    176e:	af e0       	ldi	r26, 0x0F	; 15
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodsi4>
    177a:	da 01       	movw	r26, r20
    177c:	c9 01       	movw	r24, r18
    177e:	80 93 ac 01 	sts	0x01AC, r24
    1782:	90 93 ad 01 	sts	0x01AD, r25
    1786:	a0 93 ae 01 	sts	0x01AE, r26
    178a:	b0 93 af 01 	sts	0x01AF, r27
		/* calculate the duty cycle */
		dutyCycle = ((float)(g_timePeriodPlusHigh-g_timePeriod) / (g_timePeriodPlusHigh - g_timeHigh)) * 100;
    178e:	20 91 bc 01 	lds	r18, 0x01BC
    1792:	30 91 bd 01 	lds	r19, 0x01BD
    1796:	80 91 ba 01 	lds	r24, 0x01BA
    179a:	90 91 bb 01 	lds	r25, 0x01BB
    179e:	a9 01       	movw	r20, r18
    17a0:	48 1b       	sub	r20, r24
    17a2:	59 0b       	sbc	r21, r25
    17a4:	ca 01       	movw	r24, r20
    17a6:	cc 01       	movw	r24, r24
    17a8:	a0 e0       	ldi	r26, 0x00	; 0
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    17b4:	7b 01       	movw	r14, r22
    17b6:	8c 01       	movw	r16, r24
    17b8:	20 91 bc 01 	lds	r18, 0x01BC
    17bc:	30 91 bd 01 	lds	r19, 0x01BD
    17c0:	80 91 b8 01 	lds	r24, 0x01B8
    17c4:	90 91 b9 01 	lds	r25, 0x01B9
    17c8:	a9 01       	movw	r20, r18
    17ca:	48 1b       	sub	r20, r24
    17cc:	59 0b       	sbc	r21, r25
    17ce:	ca 01       	movw	r24, r20
    17d0:	cc 01       	movw	r24, r24
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	c8 01       	movw	r24, r16
    17e4:	b7 01       	movw	r22, r14
    17e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	48 ec       	ldi	r20, 0xC8	; 200
    17f8:	52 e4       	ldi	r21, 0x42	; 66
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	80 93 a8 01 	sts	0x01A8, r24
    1812:	90 93 a9 01 	sts	0x01A9, r25
    1816:	a0 93 aa 01 	sts	0x01AA, r26
    181a:	b0 93 ab 01 	sts	0x01AB, r27
		/* calculate the period */
		period = ((g_timePeriodPlusHigh - g_timeHigh) / 1000);
    181e:	20 91 bc 01 	lds	r18, 0x01BC
    1822:	30 91 bd 01 	lds	r19, 0x01BD
    1826:	80 91 b8 01 	lds	r24, 0x01B8
    182a:	90 91 b9 01 	lds	r25, 0x01B9
    182e:	a9 01       	movw	r20, r18
    1830:	48 1b       	sub	r20, r24
    1832:	59 0b       	sbc	r21, r25
    1834:	ca 01       	movw	r24, r20
    1836:	28 ee       	ldi	r18, 0xE8	; 232
    1838:	33 e0       	ldi	r19, 0x03	; 3
    183a:	b9 01       	movw	r22, r18
    183c:	0e 94 c0 10 	call	0x2180	; 0x2180 <__udivmodhi4>
    1840:	cb 01       	movw	r24, r22
    1842:	cc 01       	movw	r24, r24
    1844:	a0 e0       	ldi	r26, 0x00	; 0
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	80 93 b0 01 	sts	0x01B0, r24
    184c:	90 93 b1 01 	sts	0x01B1, r25
    1850:	a0 93 b2 01 	sts	0x01B2, r26
    1854:	b0 93 b3 01 	sts	0x01B3, r27
		//to turn it to mili volt on 5 volt reference
		mili_volt = dutyCycle*(5*10) ;
    1858:	80 91 a8 01 	lds	r24, 0x01A8
    185c:	90 91 a9 01 	lds	r25, 0x01A9
    1860:	a0 91 aa 01 	lds	r26, 0x01AA
    1864:	b0 91 ab 01 	lds	r27, 0x01AB
    1868:	22 e3       	ldi	r18, 0x32	; 50
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 a1 10 	call	0x2142	; 0x2142 <__mulsi3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	80 93 b4 01 	sts	0x01B4, r24
    1880:	90 93 b5 01 	sts	0x01B5, r25
    1884:	a0 93 b6 01 	sts	0x01B6, r26
    1888:	b0 93 b7 01 	sts	0x01B7, r27
		
		return 1;  //true
    188c:	51 e0       	ldi	r21, 0x01	; 1
    188e:	59 83       	std	Y+1, r21	; 0x01
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <get_pulse_read+0x16e>
	}
	//Icu_Rerun(F_CPU_CLOCK);
	return 0;
    1892:	19 82       	std	Y+1, r1	; 0x01
    1894:	89 81       	ldd	r24, Y+1	; 0x01
}
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	08 95       	ret

000018a6 <APP_edgeProcessing>:


void APP_edgeProcessing(void)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    18ae:	80 91 a7 01 	lds	r24, 0x01A7
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	80 93 a7 01 	sts	0x01A7, r24
	if(g_edgeCount == 1)
    18b8:	80 91 a7 01 	lds	r24, 0x01A7
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	39 f4       	brne	.+14     	; 0x18ce <APP_edgeProcessing+0x28>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		TIMER_Clear(TIMER1);
    18c0:	85 e0       	ldi	r24, 0x05	; 5
    18c2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <TIMER_Clear>
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Icu_setEdgeDetectionType>
    18cc:	2c c0       	rjmp	.+88     	; 0x1926 <APP_edgeProcessing+0x80>
	}
	else if(g_edgeCount == 2)
    18ce:	80 91 a7 01 	lds	r24, 0x01A7
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	51 f4       	brne	.+20     	; 0x18ea <APP_edgeProcessing+0x44>
	{
		/* Store the High time value */
		g_timeHigh = Icu_getInputCaptureValue();
    18d6:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <Icu_getInputCaptureValue>
    18da:	90 93 b9 01 	sts	0x01B9, r25
    18de:	80 93 b8 01 	sts	0x01B8, r24
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Icu_setEdgeDetectionType>
    18e8:	1e c0       	rjmp	.+60     	; 0x1926 <APP_edgeProcessing+0x80>
	}
	else if(g_edgeCount == 3)
    18ea:	80 91 a7 01 	lds	r24, 0x01A7
    18ee:	83 30       	cpi	r24, 0x03	; 3
    18f0:	51 f4       	brne	.+20     	; 0x1906 <APP_edgeProcessing+0x60>
	{
		/* Store the Period time value */
		g_timePeriod = Icu_getInputCaptureValue();
    18f2:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <Icu_getInputCaptureValue>
    18f6:	90 93 bb 01 	sts	0x01BB, r25
    18fa:	80 93 ba 01 	sts	0x01BA, r24
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Icu_setEdgeDetectionType>
    1904:	10 c0       	rjmp	.+32     	; 0x1926 <APP_edgeProcessing+0x80>
	}
	else if(g_edgeCount == 4)
    1906:	80 91 a7 01 	lds	r24, 0x01A7
    190a:	84 30       	cpi	r24, 0x04	; 4
    190c:	61 f4       	brne	.+24     	; 0x1926 <APP_edgeProcessing+0x80>
	{
		//g_edgeCount=0;
		/* Store the Period time value + High time value */
		g_timePeriodPlusHigh = Icu_getInputCaptureValue();
    190e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <Icu_getInputCaptureValue>
    1912:	90 93 bd 01 	sts	0x01BD, r25
    1916:	80 93 bc 01 	sts	0x01BC, r24
		/* Clear the timer counter register to start measurements again */
		TIMER_Clear(TIMER1);
    191a:	85 e0       	ldi	r24, 0x05	; 5
    191c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <TIMER_Clear>
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Icu_setEdgeDetectionType>
	}
}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    192c:	1f 92       	push	r1
    192e:	0f 92       	push	r0
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	0f 92       	push	r0
    1934:	11 24       	eor	r1, r1
    1936:	2f 93       	push	r18
    1938:	3f 93       	push	r19
    193a:	4f 93       	push	r20
    193c:	5f 93       	push	r21
    193e:	6f 93       	push	r22
    1940:	7f 93       	push	r23
    1942:	8f 93       	push	r24
    1944:	9f 93       	push	r25
    1946:	af 93       	push	r26
    1948:	bf 93       	push	r27
    194a:	ef 93       	push	r30
    194c:	ff 93       	push	r31
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL)
    1956:	80 91 be 01 	lds	r24, 0x01BE
    195a:	90 91 bf 01 	lds	r25, 0x01BF
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	29 f0       	breq	.+10     	; 0x196c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    1962:	e0 91 be 01 	lds	r30, 0x01BE
    1966:	f0 91 bf 01 	lds	r31, 0x01BF
    196a:	09 95       	icall
	}
}
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    1992:	1f 92       	push	r1
    1994:	0f 92       	push	r0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	0f 92       	push	r0
    199a:	11 24       	eor	r1, r1
    199c:	2f 93       	push	r18
    199e:	3f 93       	push	r19
    19a0:	4f 93       	push	r20
    19a2:	5f 93       	push	r21
    19a4:	6f 93       	push	r22
    19a6:	7f 93       	push	r23
    19a8:	8f 93       	push	r24
    19aa:	9f 93       	push	r25
    19ac:	af 93       	push	r26
    19ae:	bf 93       	push	r27
    19b0:	ef 93       	push	r30
    19b2:	ff 93       	push	r31
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL)
    19bc:	80 91 be 01 	lds	r24, 0x01BE
    19c0:	90 91 bf 01 	lds	r25, 0x01BF
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	29 f0       	breq	.+10     	; 0x19d2 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    19c8:	e0 91 be 01 	lds	r30, 0x01BE
    19cc:	f0 91 bf 01 	lds	r31, 0x01BF
    19d0:	09 95       	icall
	}
}
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	ff 91       	pop	r31
    19d8:	ef 91       	pop	r30
    19da:	bf 91       	pop	r27
    19dc:	af 91       	pop	r26
    19de:	9f 91       	pop	r25
    19e0:	8f 91       	pop	r24
    19e2:	7f 91       	pop	r23
    19e4:	6f 91       	pop	r22
    19e6:	5f 91       	pop	r21
    19e8:	4f 91       	pop	r20
    19ea:	3f 91       	pop	r19
    19ec:	2f 91       	pop	r18
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	0f 90       	pop	r0
    19f4:	1f 90       	pop	r1
    19f6:	18 95       	reti

000019f8 <__vector_6>:
///////////////////////////////////
ISR(TIMER1_COMPA_vect)
{
    19f8:	1f 92       	push	r1
    19fa:	0f 92       	push	r0
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	0f 92       	push	r0
    1a00:	11 24       	eor	r1, r1
    1a02:	2f 93       	push	r18
    1a04:	3f 93       	push	r19
    1a06:	4f 93       	push	r20
    1a08:	5f 93       	push	r21
    1a0a:	6f 93       	push	r22
    1a0c:	7f 93       	push	r23
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	af 93       	push	r26
    1a14:	bf 93       	push	r27
    1a16:	ef 93       	push	r30
    1a18:	ff 93       	push	r31
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL)
    1a22:	80 91 c0 01 	lds	r24, 0x01C0
    1a26:	90 91 c1 01 	lds	r25, 0x01C1
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	29 f0       	breq	.+10     	; 0x1a38 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a2e:	e0 91 c0 01 	lds	r30, 0x01C0
    1a32:	f0 91 c1 01 	lds	r31, 0x01C1
    1a36:	09 95       	icall
	}
}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	bf 91       	pop	r27
    1a42:	af 91       	pop	r26
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	7f 91       	pop	r23
    1a4a:	6f 91       	pop	r22
    1a4c:	5f 91       	pop	r21
    1a4e:	4f 91       	pop	r20
    1a50:	3f 91       	pop	r19
    1a52:	2f 91       	pop	r18
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <__vector_5>:
ISR(TIMER1_CAPT_vect)
{
    1a5e:	1f 92       	push	r1
    1a60:	0f 92       	push	r0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	0f 92       	push	r0
    1a66:	11 24       	eor	r1, r1
    1a68:	2f 93       	push	r18
    1a6a:	3f 93       	push	r19
    1a6c:	4f 93       	push	r20
    1a6e:	5f 93       	push	r21
    1a70:	6f 93       	push	r22
    1a72:	7f 93       	push	r23
    1a74:	8f 93       	push	r24
    1a76:	9f 93       	push	r25
    1a78:	af 93       	push	r26
    1a7a:	bf 93       	push	r27
    1a7c:	ef 93       	push	r30
    1a7e:	ff 93       	push	r31
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL)
    1a88:	80 91 c0 01 	lds	r24, 0x01C0
    1a8c:	90 91 c1 01 	lds	r25, 0x01C1
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	29 f0       	breq	.+10     	; 0x1a9e <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a94:	e0 91 c0 01 	lds	r30, 0x01C0
    1a98:	f0 91 c1 01 	lds	r31, 0x01C1
    1a9c:	09 95       	icall
	}
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	ff 91       	pop	r31
    1aa4:	ef 91       	pop	r30
    1aa6:	bf 91       	pop	r27
    1aa8:	af 91       	pop	r26
    1aaa:	9f 91       	pop	r25
    1aac:	8f 91       	pop	r24
    1aae:	7f 91       	pop	r23
    1ab0:	6f 91       	pop	r22
    1ab2:	5f 91       	pop	r21
    1ab4:	4f 91       	pop	r20
    1ab6:	3f 91       	pop	r19
    1ab8:	2f 91       	pop	r18
    1aba:	0f 90       	pop	r0
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	0f 90       	pop	r0
    1ac0:	1f 90       	pop	r1
    1ac2:	18 95       	reti

00001ac4 <TIMER0_init>:
 * 	1. Set the timer type.
 * 	2. Set the required clock.
 * 	3. Initialize Timer0 Registers
 */
void TIMER0_init( TIMER_ConfigType *Config_Ptr)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <TIMER0_init+0x6>
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->type == TIMER0_OVF){
    1ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad6:	80 81       	ld	r24, Z
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	b1 f4       	brne	.+44     	; 0x1b08 <TIMER0_init+0x44>
		TCNT0=Config_Ptr->Reg_value;       // init_start;  //initial
    1adc:	a2 e5       	ldi	r26, 0x52	; 82
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	8c 93       	st	X, r24

		TCCR0 =(1<<FOC0) | (Config_Ptr->clock);  //clock
    1aea:	a3 e5       	ldi	r26, 0x53	; 83
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e9 81       	ldd	r30, Y+1	; 0x01
    1af0:	fa 81       	ldd	r31, Y+2	; 0x02
    1af2:	81 81       	ldd	r24, Z+1	; 0x01
    1af4:	80 68       	ori	r24, 0x80	; 128
    1af6:	8c 93       	st	X, r24
		TIMSK |=(1<<TOIE0);   //module enable
    1af8:	a9 e5       	ldi	r26, 0x59	; 89
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e9 e5       	ldi	r30, 0x59	; 89
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	81 60       	ori	r24, 0x01	; 1
    1b04:	8c 93       	st	X, r24
    1b06:	59 c0       	rjmp	.+178    	; 0x1bba <TIMER0_init+0xf6>
	}
	else if(Config_Ptr->type == TIMER0_CTC){
    1b08:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	c9 f4       	brne	.+50     	; 0x1b44 <TIMER0_init+0x80>
		TCNT0=0;                 //initial
    1b12:	e2 e5       	ldi	r30, 0x52	; 82
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	10 82       	st	Z, r1
		OCR0=Config_Ptr->Reg_value ;           //compare
    1b18:	ac e5       	ldi	r26, 0x5C	; 92
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	8c 93       	st	X, r24

		TCCR0 = (1<<FOC0) | (1<<WGM01) | (Config_Ptr->clock);    //clock
    1b26:	a3 e5       	ldi	r26, 0x53	; 83
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2e:	81 81       	ldd	r24, Z+1	; 0x01
    1b30:	88 68       	ori	r24, 0x88	; 136
    1b32:	8c 93       	st	X, r24
		TIMSK |=(1<<OCIE0);   //module enable
    1b34:	a9 e5       	ldi	r26, 0x59	; 89
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e9 e5       	ldi	r30, 0x59	; 89
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	82 60       	ori	r24, 0x02	; 2
    1b40:	8c 93       	st	X, r24
    1b42:	3b c0       	rjmp	.+118    	; 0x1bba <TIMER0_init+0xf6>
	}
	else if(Config_Ptr->type == TIMER0_Square_Wave){
    1b44:	e9 81       	ldd	r30, Y+1	; 0x01
    1b46:	fa 81       	ldd	r31, Y+2	; 0x02
    1b48:	80 81       	ld	r24, Z
    1b4a:	83 30       	cpi	r24, 0x03	; 3
    1b4c:	c9 f4       	brne	.+50     	; 0x1b80 <TIMER0_init+0xbc>
		DDRB |= (1<<PB3);      //make pin output
    1b4e:	a7 e3       	ldi	r26, 0x37	; 55
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e7 e3       	ldi	r30, 0x37	; 55
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	88 60       	ori	r24, 0x08	; 8
    1b5a:	8c 93       	st	X, r24
		TCNT0=0;               //initial
    1b5c:	e2 e5       	ldi	r30, 0x52	; 82
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	10 82       	st	Z, r1
		OCR0=Config_Ptr->Reg_value;         //compare
    1b62:	ac e5       	ldi	r26, 0x5C	; 92
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e9 81       	ldd	r30, Y+1	; 0x01
    1b68:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	8c 93       	st	X, r24

		TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<COM00) | (Config_Ptr->clock);    //clock
    1b70:	a3 e5       	ldi	r26, 0x53	; 83
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e9 81       	ldd	r30, Y+1	; 0x01
    1b76:	fa 81       	ldd	r31, Y+2	; 0x02
    1b78:	81 81       	ldd	r24, Z+1	; 0x01
    1b7a:	88 69       	ori	r24, 0x98	; 152
    1b7c:	8c 93       	st	X, r24
    1b7e:	1d c0       	rjmp	.+58     	; 0x1bba <TIMER0_init+0xf6>
	}
	else if(Config_Ptr->type == TIMER0_Fast_PWM){
    1b80:	e9 81       	ldd	r30, Y+1	; 0x01
    1b82:	fa 81       	ldd	r31, Y+2	; 0x02
    1b84:	80 81       	ld	r24, Z
    1b86:	84 30       	cpi	r24, 0x04	; 4
    1b88:	c1 f4       	brne	.+48     	; 0x1bba <TIMER0_init+0xf6>
		//FOCnPWM= Fclk/ (N * 256)  //N is prescaler
		//so N= Fclk/(FOCnPWM * 256)
		DDRB |= (1<<PB3);      //make pin output
    1b8a:	a7 e3       	ldi	r26, 0x37	; 55
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e7 e3       	ldi	r30, 0x37	; 55
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	88 60       	ori	r24, 0x08	; 8
    1b96:	8c 93       	st	X, r24
		TCNT0=0;                 //initial
    1b98:	e2 e5       	ldi	r30, 0x52	; 82
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	10 82       	st	Z, r1
		OCR0=Config_Ptr->Reg_value;                    //compare
    1b9e:	ac e5       	ldi	r26, 0x5C	; 92
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	8c 93       	st	X, r24

		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (Config_Ptr->clock);    //clock
    1bac:	a3 e5       	ldi	r26, 0x53	; 83
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb4:	81 81       	ldd	r24, Z+1	; 0x01
    1bb6:	88 66       	ori	r24, 0x68	; 104
    1bb8:	8c 93       	st	X, r24
	}
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <TIMER0_CallBack>:

void TIMER0_CallBack(void(*a_ptr)(void))
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <TIMER0_CallBack+0x6>
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_TIMER0_callBackPtr = a_ptr;
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	90 93 bf 01 	sts	0x01BF, r25
    1bda:	80 93 be 01 	sts	0x01BE, r24
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <TIMER1_init>:
 * 	1. Set the timer1 type.
 * 	2. Set the required clock.
 * 	3. Initialize Timer1 Registers
 */
void TIMER1_init(TIMER_ConfigType *Config_Ptr)   //need to modify
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <TIMER1_init+0x6>
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	89 83       	std	Y+1, r24	; 0x01

	if(Config_Ptr->type == TIMER0_OVF){
    1bf6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfa:	80 81       	ld	r24, Z
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	d9 f4       	brne	.+54     	; 0x1c36 <TIMER1_init+0x4e>
		TCNT1=Config_Ptr->Reg_value;       // init_start;  //initial
    1c00:	ac e4       	ldi	r26, 0x4C	; 76
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e9 81       	ldd	r30, Y+1	; 0x01
    1c06:	fa 81       	ldd	r31, Y+2	; 0x02
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	11 96       	adiw	r26, 0x01	; 1
    1c0e:	9c 93       	st	X, r25
    1c10:	8e 93       	st	-X, r24

		TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    1c12:	ef e4       	ldi	r30, 0x4F	; 79
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	8c e0       	ldi	r24, 0x0C	; 12
    1c18:	80 83       	st	Z, r24
		TCCR1B = (Config_Ptr->clock);    //clock
    1c1a:	ae e4       	ldi	r26, 0x4E	; 78
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c20:	fa 81       	ldd	r31, Y+2	; 0x02
    1c22:	81 81       	ldd	r24, Z+1	; 0x01
    1c24:	8c 93       	st	X, r24
		TIMSK |=(1<<TOIE1);   //module enable
    1c26:	a9 e5       	ldi	r26, 0x59	; 89
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e9 e5       	ldi	r30, 0x59	; 89
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	84 60       	ori	r24, 0x04	; 4
    1c32:	8c 93       	st	X, r24
    1c34:	a2 c0       	rjmp	.+324    	; 0x1d7a <TIMER1_init+0x192>
	}
	else if(Config_Ptr->type == TIMER1_CTC_A){
    1c36:	e9 81       	ldd	r30, Y+1	; 0x01
    1c38:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3a:	80 81       	ld	r24, Z
    1c3c:	87 30       	cpi	r24, 0x07	; 7
    1c3e:	01 f5       	brne	.+64     	; 0x1c80 <TIMER1_init+0x98>
		TCNT1=0;                 //initial
    1c40:	ec e4       	ldi	r30, 0x4C	; 76
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	11 82       	std	Z+1, r1	; 0x01
    1c46:	10 82       	st	Z, r1
		OCR1A=Config_Ptr->Reg_value;           //compare
    1c48:	aa e4       	ldi	r26, 0x4A	; 74
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c50:	82 81       	ldd	r24, Z+2	; 0x02
    1c52:	93 81       	ldd	r25, Z+3	; 0x03
    1c54:	11 96       	adiw	r26, 0x01	; 1
    1c56:	9c 93       	st	X, r25
    1c58:	8e 93       	st	-X, r24

		TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;           //Configuration
    1c5a:	ef e4       	ldi	r30, 0x4F	; 79
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8c e0       	ldi	r24, 0x0C	; 12
    1c60:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12) | (Config_Ptr->clock);    //clock
    1c62:	ae e4       	ldi	r26, 0x4E	; 78
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e9 81       	ldd	r30, Y+1	; 0x01
    1c68:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6a:	81 81       	ldd	r24, Z+1	; 0x01
    1c6c:	88 60       	ori	r24, 0x08	; 8
    1c6e:	8c 93       	st	X, r24
		TIMSK |=(1<<OCIE1A);    //module enable
    1c70:	a9 e5       	ldi	r26, 0x59	; 89
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e9 e5       	ldi	r30, 0x59	; 89
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 61       	ori	r24, 0x10	; 16
    1c7c:	8c 93       	st	X, r24
    1c7e:	7d c0       	rjmp	.+250    	; 0x1d7a <TIMER1_init+0x192>
	}
	else if(Config_Ptr->type == TIMER1_ICU){
    1c80:	e9 81       	ldd	r30, Y+1	; 0x01
    1c82:	fa 81       	ldd	r31, Y+2	; 0x02
    1c84:	80 81       	ld	r24, Z
    1c86:	88 30       	cpi	r24, 0x08	; 8
    1c88:	49 f5       	brne	.+82     	; 0x1cdc <TIMER1_init+0xf4>
		/* Configure ICP1/PD6 as i/p pin */
		DDRD &= ~(1<<PD6);
    1c8a:	a1 e3       	ldi	r26, 0x31	; 49
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e1 e3       	ldi	r30, 0x31	; 49
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	8f 7b       	andi	r24, 0xBF	; 191
    1c96:	8c 93       	st	X, r24

		/* Initial Value for Timer1 */
		TCNT1 = 0;
    1c98:	ec e4       	ldi	r30, 0x4C	; 76
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	11 82       	std	Z+1, r1	; 0x01
    1c9e:	10 82       	st	Z, r1
		/* Initial Value for the input capture register */
		ICR1  = 0;
    1ca0:	e6 e4       	ldi	r30, 0x46	; 70
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	11 82       	std	Z+1, r1	; 0x01
    1ca6:	10 82       	st	Z, r1

		/* Timer1 always operates in Normal Mode */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1ca8:	ef e4       	ldi	r30, 0x4F	; 79
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	8c e0       	ldi	r24, 0x0C	; 12
    1cae:	80 83       	st	Z, r24
		/*
		 *  insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register
		 *  insert the required edge type in ICES1 bit in TCCR1B Register
		 */
		TCCR1B = (TCCR1B & 0xB8) | ((Config_Ptr->clock)&0x07) | (1<<6);   //with rising
    1cb0:	ae e4       	ldi	r26, 0x4E	; 78
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ee e4       	ldi	r30, 0x4E	; 78
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	98 2f       	mov	r25, r24
    1cbc:	98 7b       	andi	r25, 0xB8	; 184
    1cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc2:	81 81       	ldd	r24, Z+1	; 0x01
    1cc4:	87 70       	andi	r24, 0x07	; 7
    1cc6:	89 2b       	or	r24, r25
    1cc8:	80 64       	ori	r24, 0x40	; 64
    1cca:	8c 93       	st	X, r24

		/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
		TIMSK |= (1<<TICIE1);
    1ccc:	a9 e5       	ldi	r26, 0x59	; 89
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e9 e5       	ldi	r30, 0x59	; 89
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	80 62       	ori	r24, 0x20	; 32
    1cd8:	8c 93       	st	X, r24
    1cda:	4f c0       	rjmp	.+158    	; 0x1d7a <TIMER1_init+0x192>
	}
	else if(Config_Ptr->type == TIMER1_Square_Wave){
    1cdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cde:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce0:	80 81       	ld	r24, Z
    1ce2:	89 30       	cpi	r24, 0x09	; 9
    1ce4:	01 f5       	brne	.+64     	; 0x1d26 <TIMER1_init+0x13e>
		DDRD |= (1<<PD5);	/* Make OC1A pin as output */
    1ce6:	a1 e3       	ldi	r26, 0x31	; 49
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e1 e3       	ldi	r30, 0x31	; 49
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 62       	ori	r24, 0x20	; 32
    1cf2:	8c 93       	st	X, r24
		TCNT1 = 0;		/* Set timer1 initial count to zero */
    1cf4:	ec e4       	ldi	r30, 0x4C	; 76
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	11 82       	std	Z+1, r1	; 0x01
    1cfa:	10 82       	st	Z, r1
		OCR1A = Config_Ptr->Reg_value;;      /* Set the compare value at A */
    1cfc:	aa e4       	ldi	r26, 0x4A	; 74
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e9 81       	ldd	r30, Y+1	; 0x01
    1d02:	fa 81       	ldd	r31, Y+2	; 0x02
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	11 96       	adiw	r26, 0x01	; 1
    1d0a:	9c 93       	st	X, r25
    1d0c:	8e 93       	st	-X, r24

		TCCR1A = (1<<FOC1A) | (1<<FOC1B)| (1<<COM1A0);
    1d0e:	ef e4       	ldi	r30, 0x4F	; 79
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8c e4       	ldi	r24, 0x4C	; 76
    1d14:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12) | (Config_Ptr->clock);    //clock
    1d16:	ae e4       	ldi	r26, 0x4E	; 78
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1e:	81 81       	ldd	r24, Z+1	; 0x01
    1d20:	88 60       	ori	r24, 0x08	; 8
    1d22:	8c 93       	st	X, r24
    1d24:	2a c0       	rjmp	.+84     	; 0x1d7a <TIMER1_init+0x192>
	}
	else if(Config_Ptr->type == TIMER1_Fast_PWM){
    1d26:	e9 81       	ldd	r30, Y+1	; 0x01
    1d28:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8a 30       	cpi	r24, 0x0A	; 10
    1d2e:	29 f5       	brne	.+74     	; 0x1d7a <TIMER1_init+0x192>
		// fOCnxPWM= fclk/ (N*(1+top) )
		// so (N*(1+top)=fclk/fOCnxPWM
		// so top =((fclk/fOCnxPWM)-N)/N
		DDRD |= (1<<PD5);	/* Make OC1A pin as output */
    1d30:	a1 e3       	ldi	r26, 0x31	; 49
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e1 e3       	ldi	r30, 0x31	; 49
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	80 62       	ori	r24, 0x20	; 32
    1d3c:	8c 93       	st	X, r24
		TCNT1 = 0;		/* Set timer1 initial count to zero */
    1d3e:	ec e4       	ldi	r30, 0x4C	; 76
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	11 82       	std	Z+1, r1	; 0x01
    1d44:	10 82       	st	Z, r1
		OCR1A = Config_Ptr->Reg_value;      /* Set the compare value at A */
    1d46:	aa e4       	ldi	r26, 0x4A	; 74
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	11 96       	adiw	r26, 0x01	; 1
    1d54:	9c 93       	st	X, r25
    1d56:	8e 93       	st	-X, r24

		ICR1 = 2499;//top;         //2499;	/* Set TOP count for timer1 in ICR1 register */
    1d58:	e6 e4       	ldi	r30, 0x46	; 70
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	83 ec       	ldi	r24, 0xC3	; 195
    1d5e:	99 e0       	ldi	r25, 0x09	; 9
    1d60:	91 83       	std	Z+1, r25	; 0x01
    1d62:	80 83       	st	Z, r24
		 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
		 * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
		 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
		 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
		 */
		TCCR1A = (1<<WGM11) | (1<<COM1A1);
    1d64:	ef e4       	ldi	r30, 0x4F	; 79
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	82 e8       	ldi	r24, 0x82	; 130
    1d6a:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1A
		 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
		 * 2. Prescaler = F_CPU/64
		 */
		TCCR1B = (1<<WGM12) | (1<<WGM13) | (Config_Ptr->clock);    //clock //(1<<CS10) | (1<<CS11);
    1d6c:	ae e4       	ldi	r26, 0x4E	; 78
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e9 81       	ldd	r30, Y+1	; 0x01
    1d72:	fa 81       	ldd	r31, Y+2	; 0x02
    1d74:	81 81       	ldd	r24, Z+1	; 0x01
    1d76:	88 61       	ori	r24, 0x18	; 24
    1d78:	8c 93       	st	X, r24
	}
}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection for icu.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType edgeType)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	0f 92       	push	r0
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (edgeType<<6);
    1d90:	ae e4       	ldi	r26, 0x4E	; 78
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	ee e4       	ldi	r30, 0x4E	; 78
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	2f 7b       	andi	r18, 0xBF	; 191
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	00 24       	eor	r0, r0
    1da6:	96 95       	lsr	r25
    1da8:	87 95       	ror	r24
    1daa:	07 94       	ror	r0
    1dac:	96 95       	lsr	r25
    1dae:	87 95       	ror	r24
    1db0:	07 94       	ror	r0
    1db2:	98 2f       	mov	r25, r24
    1db4:	80 2d       	mov	r24, r0
    1db6:	82 2b       	or	r24, r18
    1db8:	8c 93       	st	X, r24
}
    1dba:	0f 90       	pop	r0
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1dca:	e6 e4       	ldi	r30, 0x46	; 70
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
}
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <TIMER1_CallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void TIMER1_CallBack(void(*a_ptr)(void))
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <TIMER1_CallBack+0x6>
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_TIMER1_callBackPtr = a_ptr;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	90 93 c1 01 	sts	0x01C1, r25
    1dee:	80 93 c0 01 	sts	0x01C0, r24
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <Timer1_Fast_PWM_n_invert_speed>:

///////////////////////////////////
void Timer1_Fast_PWM_n_invert_speed(uint16 comp_regA)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <Timer1_Fast_PWM_n_invert_speed+0x6>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = comp_regA;      /* Set the compare value at A */
    1e0a:	ea e4       	ldi	r30, 0x4A	; 74
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	9a 81       	ldd	r25, Y+2	; 0x02
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <TIMER_Start>:
////////////////////
void TIMER_Start(uint8 timer_type,uint8 clk_slect){
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <TIMER_Start+0x6>
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	6a 83       	std	Y+2, r22	; 0x02
	if(timer_type==TIMER0)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	88 23       	and	r24, r24
    1e32:	61 f4       	brne	.+24     	; 0x1e4c <TIMER_Start+0x2c>
		TCCR0= (TCCR0&0xf8)|(clk_slect&0x07);
    1e34:	a3 e5       	ldi	r26, 0x53	; 83
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e3 e5       	ldi	r30, 0x53	; 83
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	98 2f       	mov	r25, r24
    1e40:	98 7f       	andi	r25, 0xF8	; 248
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	87 70       	andi	r24, 0x07	; 7
    1e46:	89 2b       	or	r24, r25
    1e48:	8c 93       	st	X, r24
    1e4a:	0e c0       	rjmp	.+28     	; 0x1e68 <TIMER_Start+0x48>
	else if(timer_type==TIMER1)
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	85 30       	cpi	r24, 0x05	; 5
    1e50:	59 f4       	brne	.+22     	; 0x1e68 <TIMER_Start+0x48>
		TCCR1B=(TCCR1B&0xf8)| (clk_slect&0x07);
    1e52:	ae e4       	ldi	r26, 0x4E	; 78
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	ee e4       	ldi	r30, 0x4E	; 78
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	98 2f       	mov	r25, r24
    1e5e:	98 7f       	andi	r25, 0xF8	; 248
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	87 70       	andi	r24, 0x07	; 7
    1e64:	89 2b       	or	r24, r25
    1e66:	8c 93       	st	X, r24

}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <TIMER_Stop>:
/* Disable timers  */
void TIMER_Stop(uint8 timer_type){
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	0f 92       	push	r0
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==TIMER0)
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	88 23       	and	r24, r24
    1e82:	41 f4       	brne	.+16     	; 0x1e94 <TIMER_Stop+0x22>
		TCCR0&=~0x07;
    1e84:	a3 e5       	ldi	r26, 0x53	; 83
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e3 e5       	ldi	r30, 0x53	; 83
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	88 7f       	andi	r24, 0xF8	; 248
    1e90:	8c 93       	st	X, r24
    1e92:	0a c0       	rjmp	.+20     	; 0x1ea8 <TIMER_Stop+0x36>
	else if(timer_type==TIMER1)
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	85 30       	cpi	r24, 0x05	; 5
    1e98:	39 f4       	brne	.+14     	; 0x1ea8 <TIMER_Stop+0x36>
		TCCR1B&=~0x07;
    1e9a:	ae e4       	ldi	r26, 0x4E	; 78
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	ee e4       	ldi	r30, 0x4E	; 78
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 7f       	andi	r24, 0xF8	; 248
    1ea6:	8c 93       	st	X, r24
}
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <TIMER_Clear>:
/*
 * Description: Function to clear the Timers Value to start count from ZERO
 */
void TIMER_Clear(uint8 timer_type)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==TIMER0)
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	88 23       	and	r24, r24
    1ec0:	21 f4       	brne	.+8      	; 0x1eca <TIMER_Clear+0x1a>
		TCNT0 = 0;
    1ec2:	e2 e5       	ldi	r30, 0x52	; 82
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	10 82       	st	Z, r1
    1ec8:	07 c0       	rjmp	.+14     	; 0x1ed8 <TIMER_Clear+0x28>
	else if(timer_type==TIMER1)
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	85 30       	cpi	r24, 0x05	; 5
    1ece:	21 f4       	brne	.+8      	; 0x1ed8 <TIMER_Clear+0x28>
		TCNT1 = 0;
    1ed0:	ec e4       	ldi	r30, 0x4C	; 76
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	11 82       	std	Z+1, r1	; 0x01
    1ed6:	10 82       	st	Z, r1
}
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <TIMER_Deinit>:
/*
 * Description: Function to disable the Timers to stop it
 */
void TIMER_Deinit(uint8 timer_type)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	0f 92       	push	r0
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	89 83       	std	Y+1, r24	; 0x01
	/* disable the Timer0 to stop it*/
	if(timer_type==TIMER0){
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	88 23       	and	r24, r24
    1ef0:	89 f4       	brne	.+34     	; 0x1f14 <TIMER_Deinit+0x34>
		/* Clear All Timer0 Registers */
		TCCR0 = 0;
    1ef2:	e3 e5       	ldi	r30, 0x53	; 83
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	10 82       	st	Z, r1
		TCNT0 = 0;
    1ef8:	e2 e5       	ldi	r30, 0x52	; 82
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	10 82       	st	Z, r1
		OCR0  = 0;
    1efe:	ec e5       	ldi	r30, 0x5C	; 92
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	10 82       	st	Z, r1

		/* Disable timer 0 interrupt */
		TIMSK &= ~((1<<TOIE0)|(1<<OCIE0));
    1f04:	a9 e5       	ldi	r26, 0x59	; 89
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e9 e5       	ldi	r30, 0x59	; 89
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8c 7f       	andi	r24, 0xFC	; 252
    1f10:	8c 93       	st	X, r24
    1f12:	20 c0       	rjmp	.+64     	; 0x1f54 <TIMER_Deinit+0x74>
	}
	/* disable the Timer1 to stop it*/
	else if(timer_type==TIMER1){
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	85 30       	cpi	r24, 0x05	; 5
    1f18:	e9 f4       	brne	.+58     	; 0x1f54 <TIMER_Deinit+0x74>
		/* Clear All Timer1 Registers */
		TCCR1A = 0;
    1f1a:	ef e4       	ldi	r30, 0x4F	; 79
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	10 82       	st	Z, r1
		TCCR1B = 0;
    1f20:	ee e4       	ldi	r30, 0x4E	; 78
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	10 82       	st	Z, r1
		TCNT1 = 0;
    1f26:	ec e4       	ldi	r30, 0x4C	; 76
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	11 82       	std	Z+1, r1	; 0x01
    1f2c:	10 82       	st	Z, r1
		OCR1A = 0 ;
    1f2e:	ea e4       	ldi	r30, 0x4A	; 74
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	11 82       	std	Z+1, r1	; 0x01
    1f34:	10 82       	st	Z, r1
		OCR1B = 0 ;
    1f36:	e8 e4       	ldi	r30, 0x48	; 72
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	11 82       	std	Z+1, r1	; 0x01
    1f3c:	10 82       	st	Z, r1
		ICR1 = 0;
    1f3e:	e6 e4       	ldi	r30, 0x46	; 70
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	11 82       	std	Z+1, r1	; 0x01
    1f44:	10 82       	st	Z, r1

		/* Disable the timer1 interrupt */
		TIMSK &= ~((1<<TOIE1)|(1<<OCIE1A)|(1<<OCIE1B)|(1<<TICIE1));
    1f46:	a9 e5       	ldi	r26, 0x59	; 89
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e9 e5       	ldi	r30, 0x59	; 89
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	83 7c       	andi	r24, 0xC3	; 195
    1f52:	8c 93       	st	X, r24
	}

}
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <WDT_ON>:
}


#endif
/*w d timer */
void WDT_ON(uint8 WDClk){
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	0f 92       	push	r0
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	89 83       	std	Y+1, r24	; 0x01
	WDTCR= (1<<WDE)|(WDClk);
    1f68:	e1 e4       	ldi	r30, 0x41	; 65
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	88 60       	ori	r24, 0x08	; 8
    1f70:	80 83       	st	Z, r24
}
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <WDT_OFF>:

void WDT_OFF(uint8 four_cycles){
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	69 97       	sbiw	r28, 0x19	; 25
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	89 8f       	std	Y+25, r24	; 0x19
	WDTCR=(1<<WDE)|(1<<WDTOE);
    1f90:	e1 e4       	ldi	r30, 0x41	; 65
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	88 e1       	ldi	r24, 0x18	; 24
    1f96:	80 83       	st	Z, r24
	_delay_us(four_cycles);
    1f98:	89 8d       	ldd	r24, Y+25	; 0x19
    1f9a:	88 2f       	mov	r24, r24
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a0 e0       	ldi	r26, 0x00	; 0
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8d 8b       	std	Y+21, r24	; 0x15
    1fb0:	9e 8b       	std	Y+22, r25	; 0x16
    1fb2:	af 8b       	std	Y+23, r26	; 0x17
    1fb4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fba:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbe:	2b ea       	ldi	r18, 0xAB	; 171
    1fc0:	3a ea       	ldi	r19, 0xAA	; 170
    1fc2:	4a ea       	ldi	r20, 0xAA	; 170
    1fc4:	5e e3       	ldi	r21, 0x3E	; 62
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	89 8b       	std	Y+17, r24	; 0x11
    1fd0:	9a 8b       	std	Y+18, r25	; 0x12
    1fd2:	ab 8b       	std	Y+19, r26	; 0x13
    1fd4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fd6:	69 89       	ldd	r22, Y+17	; 0x11
    1fd8:	7a 89       	ldd	r23, Y+18	; 0x12
    1fda:	8b 89       	ldd	r24, Y+19	; 0x13
    1fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1fea:	88 23       	and	r24, r24
    1fec:	1c f4       	brge	.+6      	; 0x1ff4 <WDT_OFF+0x7a>
		__ticks = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	88 8b       	std	Y+16, r24	; 0x10
    1ff2:	91 c0       	rjmp	.+290    	; 0x2116 <WDT_OFF+0x19c>
	else if (__tmp > 255)
    1ff4:	69 89       	ldd	r22, Y+17	; 0x11
    1ff6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	53 e4       	ldi	r21, 0x43	; 67
    2004:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	0c f0       	brlt	.+2      	; 0x200e <WDT_OFF+0x94>
    200c:	7b c0       	rjmp	.+246    	; 0x2104 <WDT_OFF+0x18a>
	{
		_delay_ms(__us / 1000.0);
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	4a e7       	ldi	r20, 0x7A	; 122
    201c:	54 e4       	ldi	r21, 0x44	; 68
    201e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	8c 87       	std	Y+12, r24	; 0x0c
    2028:	9d 87       	std	Y+13, r25	; 0x0d
    202a:	ae 87       	std	Y+14, r26	; 0x0e
    202c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2030:	7d 85       	ldd	r23, Y+13	; 0x0d
    2032:	8e 85       	ldd	r24, Y+14	; 0x0e
    2034:	9f 85       	ldd	r25, Y+15	; 0x0f
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a e7       	ldi	r20, 0x7A	; 122
    203c:	53 e4       	ldi	r21, 0x43	; 67
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	88 87       	std	Y+8, r24	; 0x08
    2048:	99 87       	std	Y+9, r25	; 0x09
    204a:	aa 87       	std	Y+10, r26	; 0x0a
    204c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    204e:	68 85       	ldd	r22, Y+8	; 0x08
    2050:	79 85       	ldd	r23, Y+9	; 0x09
    2052:	8a 85       	ldd	r24, Y+10	; 0x0a
    2054:	9b 85       	ldd	r25, Y+11	; 0x0b
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e8       	ldi	r20, 0x80	; 128
    205c:	5f e3       	ldi	r21, 0x3F	; 63
    205e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2062:	88 23       	and	r24, r24
    2064:	2c f4       	brge	.+10     	; 0x2070 <WDT_OFF+0xf6>
		__ticks = 1;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	9f 83       	std	Y+7, r25	; 0x07
    206c:	8e 83       	std	Y+6, r24	; 0x06
    206e:	3f c0       	rjmp	.+126    	; 0x20ee <WDT_OFF+0x174>
	else if (__tmp > 65535)
    2070:	68 85       	ldd	r22, Y+8	; 0x08
    2072:	79 85       	ldd	r23, Y+9	; 0x09
    2074:	8a 85       	ldd	r24, Y+10	; 0x0a
    2076:	9b 85       	ldd	r25, Y+11	; 0x0b
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	3f ef       	ldi	r19, 0xFF	; 255
    207c:	4f e7       	ldi	r20, 0x7F	; 127
    207e:	57 e4       	ldi	r21, 0x47	; 71
    2080:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2084:	18 16       	cp	r1, r24
    2086:	4c f5       	brge	.+82     	; 0x20da <WDT_OFF+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2088:	6c 85       	ldd	r22, Y+12	; 0x0c
    208a:	7d 85       	ldd	r23, Y+13	; 0x0d
    208c:	8e 85       	ldd	r24, Y+14	; 0x0e
    208e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e2       	ldi	r20, 0x20	; 32
    2096:	51 e4       	ldi	r21, 0x41	; 65
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9f 83       	std	Y+7, r25	; 0x07
    20ae:	8e 83       	std	Y+6, r24	; 0x06
    20b0:	0f c0       	rjmp	.+30     	; 0x20d0 <WDT_OFF+0x156>
    20b2:	89 e1       	ldi	r24, 0x19	; 25
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9d 83       	std	Y+5, r25	; 0x05
    20b8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <WDT_OFF+0x144>
    20c2:	9d 83       	std	Y+5, r25	; 0x05
    20c4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c6:	8e 81       	ldd	r24, Y+6	; 0x06
    20c8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	9f 83       	std	Y+7, r25	; 0x07
    20ce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d0:	8e 81       	ldd	r24, Y+6	; 0x06
    20d2:	9f 81       	ldd	r25, Y+7	; 0x07
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	69 f7       	brne	.-38     	; 0x20b2 <WDT_OFF+0x138>
    20d8:	24 c0       	rjmp	.+72     	; 0x2122 <WDT_OFF+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20da:	68 85       	ldd	r22, Y+8	; 0x08
    20dc:	79 85       	ldd	r23, Y+9	; 0x09
    20de:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	9f 83       	std	Y+7, r25	; 0x07
    20ec:	8e 83       	std	Y+6, r24	; 0x06
    20ee:	8e 81       	ldd	r24, Y+6	; 0x06
    20f0:	9f 81       	ldd	r25, Y+7	; 0x07
    20f2:	9b 83       	std	Y+3, r25	; 0x03
    20f4:	8a 83       	std	Y+2, r24	; 0x02
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	9b 81       	ldd	r25, Y+3	; 0x03
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <WDT_OFF+0x180>
    20fe:	9b 83       	std	Y+3, r25	; 0x03
    2100:	8a 83       	std	Y+2, r24	; 0x02
    2102:	0f c0       	rjmp	.+30     	; 0x2122 <WDT_OFF+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2104:	69 89       	ldd	r22, Y+17	; 0x11
    2106:	7a 89       	ldd	r23, Y+18	; 0x12
    2108:	8b 89       	ldd	r24, Y+19	; 0x13
    210a:	9c 89       	ldd	r25, Y+20	; 0x14
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	88 8b       	std	Y+16, r24	; 0x10
    2116:	88 89       	ldd	r24, Y+16	; 0x10
    2118:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	8a 95       	dec	r24
    211e:	f1 f7       	brne	.-4      	; 0x211c <WDT_OFF+0x1a2>
    2120:	89 83       	std	Y+1, r24	; 0x01
	WDTCR&=~(1<<WDE);
    2122:	a1 e4       	ldi	r26, 0x41	; 65
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e1 e4       	ldi	r30, 0x41	; 65
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	87 7f       	andi	r24, 0xF7	; 247
    212e:	8c 93       	st	X, r24
}
    2130:	69 96       	adiw	r28, 0x19	; 25
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <__mulsi3>:
    2142:	62 9f       	mul	r22, r18
    2144:	d0 01       	movw	r26, r0
    2146:	73 9f       	mul	r23, r19
    2148:	f0 01       	movw	r30, r0
    214a:	82 9f       	mul	r24, r18
    214c:	e0 0d       	add	r30, r0
    214e:	f1 1d       	adc	r31, r1
    2150:	64 9f       	mul	r22, r20
    2152:	e0 0d       	add	r30, r0
    2154:	f1 1d       	adc	r31, r1
    2156:	92 9f       	mul	r25, r18
    2158:	f0 0d       	add	r31, r0
    215a:	83 9f       	mul	r24, r19
    215c:	f0 0d       	add	r31, r0
    215e:	74 9f       	mul	r23, r20
    2160:	f0 0d       	add	r31, r0
    2162:	65 9f       	mul	r22, r21
    2164:	f0 0d       	add	r31, r0
    2166:	99 27       	eor	r25, r25
    2168:	72 9f       	mul	r23, r18
    216a:	b0 0d       	add	r27, r0
    216c:	e1 1d       	adc	r30, r1
    216e:	f9 1f       	adc	r31, r25
    2170:	63 9f       	mul	r22, r19
    2172:	b0 0d       	add	r27, r0
    2174:	e1 1d       	adc	r30, r1
    2176:	f9 1f       	adc	r31, r25
    2178:	bd 01       	movw	r22, r26
    217a:	cf 01       	movw	r24, r30
    217c:	11 24       	eor	r1, r1
    217e:	08 95       	ret

00002180 <__udivmodhi4>:
    2180:	aa 1b       	sub	r26, r26
    2182:	bb 1b       	sub	r27, r27
    2184:	51 e1       	ldi	r21, 0x11	; 17
    2186:	07 c0       	rjmp	.+14     	; 0x2196 <__udivmodhi4_ep>

00002188 <__udivmodhi4_loop>:
    2188:	aa 1f       	adc	r26, r26
    218a:	bb 1f       	adc	r27, r27
    218c:	a6 17       	cp	r26, r22
    218e:	b7 07       	cpc	r27, r23
    2190:	10 f0       	brcs	.+4      	; 0x2196 <__udivmodhi4_ep>
    2192:	a6 1b       	sub	r26, r22
    2194:	b7 0b       	sbc	r27, r23

00002196 <__udivmodhi4_ep>:
    2196:	88 1f       	adc	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	5a 95       	dec	r21
    219c:	a9 f7       	brne	.-22     	; 0x2188 <__udivmodhi4_loop>
    219e:	80 95       	com	r24
    21a0:	90 95       	com	r25
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	08 95       	ret

000021a8 <__divmodhi4>:
    21a8:	97 fb       	bst	r25, 7
    21aa:	09 2e       	mov	r0, r25
    21ac:	07 26       	eor	r0, r23
    21ae:	0a d0       	rcall	.+20     	; 0x21c4 <__divmodhi4_neg1>
    21b0:	77 fd       	sbrc	r23, 7
    21b2:	04 d0       	rcall	.+8      	; 0x21bc <__divmodhi4_neg2>
    21b4:	e5 df       	rcall	.-54     	; 0x2180 <__udivmodhi4>
    21b6:	06 d0       	rcall	.+12     	; 0x21c4 <__divmodhi4_neg1>
    21b8:	00 20       	and	r0, r0
    21ba:	1a f4       	brpl	.+6      	; 0x21c2 <__divmodhi4_exit>

000021bc <__divmodhi4_neg2>:
    21bc:	70 95       	com	r23
    21be:	61 95       	neg	r22
    21c0:	7f 4f       	sbci	r23, 0xFF	; 255

000021c2 <__divmodhi4_exit>:
    21c2:	08 95       	ret

000021c4 <__divmodhi4_neg1>:
    21c4:	f6 f7       	brtc	.-4      	; 0x21c2 <__divmodhi4_exit>
    21c6:	90 95       	com	r25
    21c8:	81 95       	neg	r24
    21ca:	9f 4f       	sbci	r25, 0xFF	; 255
    21cc:	08 95       	ret

000021ce <__divmodsi4>:
    21ce:	97 fb       	bst	r25, 7
    21d0:	09 2e       	mov	r0, r25
    21d2:	05 26       	eor	r0, r21
    21d4:	0e d0       	rcall	.+28     	; 0x21f2 <__divmodsi4_neg1>
    21d6:	57 fd       	sbrc	r21, 7
    21d8:	04 d0       	rcall	.+8      	; 0x21e2 <__divmodsi4_neg2>
    21da:	14 d0       	rcall	.+40     	; 0x2204 <__udivmodsi4>
    21dc:	0a d0       	rcall	.+20     	; 0x21f2 <__divmodsi4_neg1>
    21de:	00 1c       	adc	r0, r0
    21e0:	38 f4       	brcc	.+14     	; 0x21f0 <__divmodsi4_exit>

000021e2 <__divmodsi4_neg2>:
    21e2:	50 95       	com	r21
    21e4:	40 95       	com	r20
    21e6:	30 95       	com	r19
    21e8:	21 95       	neg	r18
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	4f 4f       	sbci	r20, 0xFF	; 255
    21ee:	5f 4f       	sbci	r21, 0xFF	; 255

000021f0 <__divmodsi4_exit>:
    21f0:	08 95       	ret

000021f2 <__divmodsi4_neg1>:
    21f2:	f6 f7       	brtc	.-4      	; 0x21f0 <__divmodsi4_exit>
    21f4:	90 95       	com	r25
    21f6:	80 95       	com	r24
    21f8:	70 95       	com	r23
    21fa:	61 95       	neg	r22
    21fc:	7f 4f       	sbci	r23, 0xFF	; 255
    21fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	08 95       	ret

00002204 <__udivmodsi4>:
    2204:	a1 e2       	ldi	r26, 0x21	; 33
    2206:	1a 2e       	mov	r1, r26
    2208:	aa 1b       	sub	r26, r26
    220a:	bb 1b       	sub	r27, r27
    220c:	fd 01       	movw	r30, r26
    220e:	0d c0       	rjmp	.+26     	; 0x222a <__udivmodsi4_ep>

00002210 <__udivmodsi4_loop>:
    2210:	aa 1f       	adc	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	ee 1f       	adc	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	a2 17       	cp	r26, r18
    221a:	b3 07       	cpc	r27, r19
    221c:	e4 07       	cpc	r30, r20
    221e:	f5 07       	cpc	r31, r21
    2220:	20 f0       	brcs	.+8      	; 0x222a <__udivmodsi4_ep>
    2222:	a2 1b       	sub	r26, r18
    2224:	b3 0b       	sbc	r27, r19
    2226:	e4 0b       	sbc	r30, r20
    2228:	f5 0b       	sbc	r31, r21

0000222a <__udivmodsi4_ep>:
    222a:	66 1f       	adc	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	88 1f       	adc	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	1a 94       	dec	r1
    2234:	69 f7       	brne	.-38     	; 0x2210 <__udivmodsi4_loop>
    2236:	60 95       	com	r22
    2238:	70 95       	com	r23
    223a:	80 95       	com	r24
    223c:	90 95       	com	r25
    223e:	9b 01       	movw	r18, r22
    2240:	ac 01       	movw	r20, r24
    2242:	bd 01       	movw	r22, r26
    2244:	cf 01       	movw	r24, r30
    2246:	08 95       	ret

00002248 <__prologue_saves__>:
    2248:	2f 92       	push	r2
    224a:	3f 92       	push	r3
    224c:	4f 92       	push	r4
    224e:	5f 92       	push	r5
    2250:	6f 92       	push	r6
    2252:	7f 92       	push	r7
    2254:	8f 92       	push	r8
    2256:	9f 92       	push	r9
    2258:	af 92       	push	r10
    225a:	bf 92       	push	r11
    225c:	cf 92       	push	r12
    225e:	df 92       	push	r13
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	ca 1b       	sub	r28, r26
    2272:	db 0b       	sbc	r29, r27
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	09 94       	ijmp

00002280 <__epilogue_restores__>:
    2280:	2a 88       	ldd	r2, Y+18	; 0x12
    2282:	39 88       	ldd	r3, Y+17	; 0x11
    2284:	48 88       	ldd	r4, Y+16	; 0x10
    2286:	5f 84       	ldd	r5, Y+15	; 0x0f
    2288:	6e 84       	ldd	r6, Y+14	; 0x0e
    228a:	7d 84       	ldd	r7, Y+13	; 0x0d
    228c:	8c 84       	ldd	r8, Y+12	; 0x0c
    228e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2290:	aa 84       	ldd	r10, Y+10	; 0x0a
    2292:	b9 84       	ldd	r11, Y+9	; 0x09
    2294:	c8 84       	ldd	r12, Y+8	; 0x08
    2296:	df 80       	ldd	r13, Y+7	; 0x07
    2298:	ee 80       	ldd	r14, Y+6	; 0x06
    229a:	fd 80       	ldd	r15, Y+5	; 0x05
    229c:	0c 81       	ldd	r16, Y+4	; 0x04
    229e:	1b 81       	ldd	r17, Y+3	; 0x03
    22a0:	aa 81       	ldd	r26, Y+2	; 0x02
    22a2:	b9 81       	ldd	r27, Y+1	; 0x01
    22a4:	ce 0f       	add	r28, r30
    22a6:	d1 1d       	adc	r29, r1
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	ed 01       	movw	r28, r26
    22b4:	08 95       	ret

000022b6 <_exit>:
    22b6:	f8 94       	cli

000022b8 <__stop_program>:
    22b8:	ff cf       	rjmp	.-2      	; 0x22b8 <__stop_program>
